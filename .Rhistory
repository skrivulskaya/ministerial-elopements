# flow = .01,
maxThickness = 2,
color = "navy",
popup = NULL
)
m %>% addTiles() %>%
# addPolylines(data = complete.lines, popup = ~popupw, group = "Connections") %>%
addMarkers(data = orig.spdf, popup = ~popupw, group = "Origin",clusterOptions = markerClusterOptions()) %>%
#addMarkers(data = found.spdf, popup = ~popupw, group = "Found",clusterOptions = markerClusterOptions()) %>%
addLayersControl(
overlayGroups = c("Origin", "Found","Connections"),
options = layersControlOptions(collapsed = FALSE)
)%>%
addFlows(
elop.map$Longtitude_Origin, elop.map$Latitude_Origin, elop.map$Longtitude_Found, elop.map$Latitude_Found,
# flow = .01,
maxThickness = 2,
color = "navy"
# popup = NULL
)
m %>% addTiles() %>%
# addPolylines(data = complete.lines, popup = ~popupw, group = "Connections") %>%
addMarkers(data = orig.spdf, popup = ~popupw, group = "Origin",clusterOptions = markerClusterOptions()) %>%
#addMarkers(data = found.spdf, popup = ~popupw, group = "Found",clusterOptions = markerClusterOptions()) %>%
addLayersControl(
overlayGroups = c("Origin", "Found","Connections"),
options = layersControlOptions(collapsed = FALSE)
)%>%
addFlows(
elop.map$Longtitude_Origin, elop.map$Latitude_Origin, elop.map$Longtitude_Found, elop.map$Latitude_Found,
# flow = .01,
maxThickness = 2,
color = "navy",
popup = popupArgs(showTitle = F, showValues = F, labels = NULL,
supValues = NULL, supLabels = colnames(supValues), html = ~popupw,
noPopup = FALSE, digits = NULL)
)
m %>% addTiles() %>%
# addPolylines(data = complete.lines, popup = ~popupw, group = "Connections") %>%
addMarkers(data = orig.spdf, popup = ~popupw, group = "Origin",clusterOptions = markerClusterOptions()) %>%
#addMarkers(data = found.spdf, popup = ~popupw, group = "Found",clusterOptions = markerClusterOptions()) %>%
addLayersControl(
overlayGroups = c("Origin", "Found","Connections"),
options = layersControlOptions(collapsed = FALSE)
)%>%
addFlows(
elop.map$Longtitude_Origin, elop.map$Latitude_Origin, elop.map$Longtitude_Found, elop.map$Latitude_Found,
# flow = .01,
maxThickness = 2,
color = "navy",
popup = popupArgs(showTitle = F, showValues = F, labels = NULL,
supValues = NULL, supLabels = colnames(elop.map), html = ~popupw,
noPopup = FALSE, digits = NULL)
)
m %>% addTiles() %>%
# addPolylines(data = complete.lines, popup = ~popupw, group = "Connections") %>%
addMarkers(data = orig.spdf, popup = ~popupw, group = "Origin",clusterOptions = markerClusterOptions()) %>%
#addMarkers(data = found.spdf, popup = ~popupw, group = "Found",clusterOptions = markerClusterOptions()) %>%
addLayersControl(
overlayGroups = c("Origin", "Found","Connections"),
options = layersControlOptions(collapsed = FALSE)
)%>%
addFlows(
elop.map$Longtitude_Origin, elop.map$Latitude_Origin, elop.map$Longtitude_Found, elop.map$Latitude_Found,
# flow = .01,
maxThickness = 2,
color = "navy",
popup = popupArgs(showTitle = F, showValues = F, labels = NULL,
supValues = NULL, supLabels = colnames(elop.map), html = "popupw",
noPopup = FALSE, digits = NULL)
)
m %>% addTiles() %>%
# addPolylines(data = complete.lines, popup = ~popupw, group = "Connections") %>%
addMarkers(data = orig.spdf, popup = ~popupw, group = "Origin",clusterOptions = markerClusterOptions()) %>%
#addMarkers(data = found.spdf, popup = ~popupw, group = "Found",clusterOptions = markerClusterOptions()) %>%
addLayersControl(
overlayGroups = c("Origin", "Found","Connections"),
options = layersControlOptions(collapsed = FALSE)
)%>%
addFlows(
elop.map$Longtitude_Origin, elop.map$Latitude_Origin, elop.map$Longtitude_Found, elop.map$Latitude_Found,
# flow = .01,
maxThickness = 2,
color = "navy",
popup = popupArgs(showTitle = F, showValues = T, labels = NULL,
supValues = NULL, supLabels = colnames(elop.map), html = "popupw",
noPopup = FALSE, digits = NULL)
)
m %>% addTiles() %>%
# addPolylines(data = complete.lines, popup = ~popupw, group = "Connections") %>%
addMarkers(data = orig.spdf, popup = ~popupw, group = "Origin",clusterOptions = markerClusterOptions()) %>%
#addMarkers(data = found.spdf, popup = ~popupw, group = "Found",clusterOptions = markerClusterOptions()) %>%
addLayersControl(
overlayGroups = c("Origin", "Found","Connections"),
options = layersControlOptions(collapsed = FALSE)
)%>%
addFlows(
elop.map$Longtitude_Origin, elop.map$Latitude_Origin, elop.map$Longtitude_Found, elop.map$Latitude_Found,
# flow = .01,
maxThickness = 2,
color = "navy",
popup = popupArgs(showTitle = F, showValues = T, labels = NULL,
supValues = NULL, supLabels = colnames(elop.map), html = "popupw",
noPopup = T, digits = NULL)
)
m %>% addTiles() %>%
addPolylines(data = complete.lines, popup = ~popupw, group = "Connections") %>%
addMarkers(data = orig.spdf, popup = ~popupw, group = "Origin",clusterOptions = markerClusterOptions()) %>%
#addMarkers(data = found.spdf, popup = ~popupw, group = "Found",clusterOptions = markerClusterOptions()) %>%
addLayersControl(
overlayGroups = c("Origin", "Found","Connections"),
options = layersControlOptions(collapsed = FALSE)
)%>%
addFlows(
elop.map$Longtitude_Origin, elop.map$Latitude_Origin, elop.map$Longtitude_Found, elop.map$Latitude_Found,
# flow = .01,
maxThickness = 2,
color = "navy",
popup = popupArgs(showTitle = F, showValues = T, labels = NULL,
supValues = NULL, supLabels = colnames(elop.map), html = "popupw",
noPopup = T, digits = NULL)
)
m %>% addTiles() %>%
addMarkers(data = orig.spdf, popup = ~popupw, group = "Origin",clusterOptions = markerClusterOptions()) %>%
addMarkers(data = found.spdf, popup = ~popupw, group = "Found",clusterOptions = markerClusterOptions()) %>%
addMarkers(data = orig.spdf, popup = ~popupw, group = "Origin",clusterOptions = markerClusterOptions()) %>%
addLayersControl(
overlayGroups = c("Origin", "Found","Connections"),
options = layersControlOptions(collapsed = FALSE)
)%>%
addFlows(
elop.map$Longtitude_Origin, elop.map$Latitude_Origin, elop.map$Longtitude_Found, elop.map$Latitude_Found,
# flow = .01,
maxThickness = 2,
color = "navy",
popup = popupArgs(showTitle = F, showValues = T, labels = NULL,
supValues = NULL, supLabels = colnames(elop.map), html = "popupw",
noPopup = T, digits = NULL)
)%>% # end add flows
addPolylines(data = complete.lines, popup = ~popupw, group = "Connections") %>%
#end new testing
#Basic Leaflet Maps
m <- leaflet()
m %>% addTiles() %>%
addMarkers(data = orig.spdf, popup = ~popupw, group = "Origin",clusterOptions = markerClusterOptions()) %>%
addMarkers(data = found.spdf, popup = ~popupw, group = "Found",clusterOptions = markerClusterOptions()) %>%
addMarkers(data = orig.spdf, popup = ~popupw, group = "Origin",clusterOptions = markerClusterOptions()) %>%
addLayersControl(
overlayGroups = c("Origin", "Found","Connections"),
options = layersControlOptions(collapsed = FALSE)
)%>%
addFlows(
elop.map$Longtitude_Origin, elop.map$Latitude_Origin, elop.map$Longtitude_Found, elop.map$Latitude_Found,
# flow = .01,
maxThickness = 2,
color = "navy",
popup = popupArgs(showTitle = F, showValues = T, labels = NULL,
supValues = NULL, supLabels = colnames(elop.map), html = "popupw",
noPopup = T, digits = NULL)
)%>% # end add flows
addPolylines(data = complete.lines, popup = ~popupw, group = "Connections")
m %>% addTiles() %>%
addMarkers(data = orig.spdf, popup = ~popupw, group = "Origin",clusterOptions = markerClusterOptions()) %>%
addMarkers(data = found.spdf, popup = ~popupw, group = "Found",clusterOptions = markerClusterOptions()) %>%
addCircleMarkers(data = elop.same, popup = ~popupw, group = "Connections",color = "navy",radius=3) %>%
addLayersControl(
overlayGroups = c("Origin", "Found","Connections"),
options = layersControlOptions(collapsed = FALSE)
)%>%
addFlows(
elop.map$Longtitude_Origin, elop.map$Latitude_Origin, elop.map$Longtitude_Found, elop.map$Latitude_Found,
# flow = .01,
maxThickness = 2,
color = "navy",
popup = popupArgs(showTitle = F, showValues = T, labels = NULL,
supValues = NULL, supLabels = colnames(elop.map), html = "popupw",
noPopup = T, digits = NULL)
)%>% # end add flows
addPolylines(data = complete.lines, popup = ~popupw, group = "Connections")
same.spdf <- elop.comp[which(elop.comp$Location_Origin == elop.comp$Location_Found),]
coordinates(same.spdf)=~Longtitude_Found+Latitude_Found
proj4string(same.spdf) <- CRS(latlong)
m <- leaflet()
m %>% addTiles() %>%
addMarkers(data = orig.spdf, popup = ~popupw, group = "Origin",clusterOptions = markerClusterOptions()) %>%
addMarkers(data = found.spdf, popup = ~popupw, group = "Found",clusterOptions = markerClusterOptions()) %>%
addCircleMarkers(data = same.spdf, popup = ~popupw, group = "Connections",color = "navy",radius=3) %>%
addLayersControl(
overlayGroups = c("Origin", "Found","Connections"),
options = layersControlOptions(collapsed = FALSE)
)%>%
addFlows(
elop.map$Longtitude_Origin, elop.map$Latitude_Origin, elop.map$Longtitude_Found, elop.map$Latitude_Found,
# flow = .01,
maxThickness = 2,
color = "navy",
popup = popupArgs(showTitle = F, showValues = T, labels = NULL,
supValues = NULL, supLabels = colnames(elop.map), html = "popupw",
noPopup = T, digits = NULL)
)%>% # end add flows
addPolylines(data = complete.lines, popup = ~popupw, group = "Connections")
m %>% addTiles() %>%
addMarkers(data = orig.spdf, popup = ~popupw, group = "Origin",clusterOptions = markerClusterOptions()) %>%
addMarkers(data = found.spdf, popup = ~popupw, group = "Found",clusterOptions = markerClusterOptions()) %>%
addCircleMarkers(data = same.spdf, popup = ~popupw, group = "Connections",color = "navy",radius=5) %>%
addLayersControl(
overlayGroups = c("Origin", "Found","Connections"),
options = layersControlOptions(collapsed = FALSE)
)%>%
addFlows(
elop.map$Longtitude_Origin, elop.map$Latitude_Origin, elop.map$Longtitude_Found, elop.map$Latitude_Found,
# flow = .01,
maxThickness = 2,
color = "navy",
popup = popupArgs(showTitle = F, showValues = T, labels = NULL,
supValues = NULL, supLabels = colnames(elop.map), html = "popupw",
noPopup = T, digits = NULL)
)%>% # end add flows
addPolylines(data = complete.lines, popup = ~popupw, group = "Connections")
elop.raw$popupw <- paste(sep = "",  "<b>",elop.raw$Full_Name,"</b><br/>",
"What = ",elop.raw$Accusations,"<br/>",
"Origin = ",elop.raw$Location_Origin,"<br/>",
"Found = ",elop.raw$Location_Found,"<br/>"
) #A bit of HTML To make the popups on the lines
elop.comp <- elop.raw[which(!is.na(elop.raw$Latitude_Found)),]
row.names(elop.comp) <- NULL
lines <- list()
for (i in 1:nrow(elop.comp)) {
lines[[i]] <- Lines(list(Line(rbind(c(elop.comp$Longtitude_Origin[i],elop.comp$Latitude_Origin[i]), c(elop.comp$Longtitude_Found[i], elop.comp$Latitude_Found[i]) ))), as.character(i))
#print(i)
}
complete.lines <- SpatialLinesDataFrame(SpatialLines(lines),elop.comp)
b <- rbind(table(elop.raw$Decade),table(elop.raw$Eloped_with_Married_Woman, elop.raw$Decade))
barplot(b)
orig.spdf <- elop.raw[which(!is.na(elop.raw$Latitude_Origin)),]
coordinates(orig.spdf)=~Longtitude_Origin+Latitude_Origin
proj4string(orig.spdf) <- CRS(latlong)
found.spdf <- elop.raw[which(!is.na(elop.raw$Latitude_Found)),]
coordinates(found.spdf)=~Longtitude_Found+Latitude_Found
proj4string(found.spdf) <- CRS(latlong)
elop.map <-elop.comp[which(elop.comp$Location_Origin != elop.comp$Location_Found),]
same.spdf <- elop.comp[which(elop.comp$Location_Origin == elop.comp$Location_Found),]
coordinates(same.spdf)=~Longtitude_Found+Latitude_Found
proj4string(same.spdf) <- CRS(latlong)
m <- leaflet()
m %>% addTiles() %>%
addMarkers(data = orig.spdf, popup = ~popupw, group = "Origin",clusterOptions = markerClusterOptions()) %>%
addMarkers(data = found.spdf, popup = ~popupw, group = "Found",clusterOptions = markerClusterOptions()) %>%
addCircleMarkers(data = same.spdf, popup = ~popupw, group = "Connections",color = "navy",radius=5) %>%
addLayersControl(
overlayGroups = c("Origin", "Found","Connections"),
options = layersControlOptions(collapsed = FALSE)
)%>%
addFlows(
elop.map$Longtitude_Origin, elop.map$Latitude_Origin, elop.map$Longtitude_Found, elop.map$Latitude_Found,
# flow = .01,
maxThickness = 2,
color = "navy",
popup = popupArgs(showTitle = F, showValues = T, labels = NULL,
supValues = NULL, supLabels = colnames(elop.map), html = "popupw",
noPopup = T, digits = NULL)
)%>% # end add flows
addPolylines(data = complete.lines, popup = ~popupw, group = "Connections")
rnorn()
rnorm()
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
?rnorm
runif()
runif(4)
runif(1)
runif(1)-.5
runif(1)-.5
runif(1)-.5
runif(1)-.5
runif(1)-.5
runif(1)-.5
(runif(1)-.5)/10
(runif(1)-.5)/10
(runif(1)-.5)/10
(runif(1)-.5)/10
?coordinates
rm(list=ls(all=TRUE)) # clear memory
#MLS Todo:
#Add Arrowheads to main map.
#Deal with multiple people in same place (randomize points).
#Find a good symbol for people that are found in the same city
# classification direction
packages<- c("maptools","rgdal","leaflet","htmlwidgets","shiny","ggmap","rsconnect", "leaflet.minicharts") # list the packages that you'll need
lapply(packages, require, character.only=T) # load the packages, if they don't load you might need to install them first
setwd("/home/matthew/GIT/R_Scripts/ministerial-elopements")
setwd("E:\\GIT_Checkouts\\R_Scripts\\ministerial-elopements")
latlong <- "+init=epsg:4326"
#Loading the geocoded data
elop.raw <- read.csv("ministerial_elopements_geocoded.csv",stringsAsFactors = F)
elop.raw$popupw <- paste(sep = "",  "<b>",elop.raw$Full_Name,"</b><br/>",
"What = ",elop.raw$Accusations,"<br/>",
"Origin = ",elop.raw$Location_Origin,"<br/>",
"Found = ",elop.raw$Location_Found,"<br/>"
) #A bit of HTML To make the popups on the lines
#Creating the Line objects out of the point objects:
elop.comp <- elop.raw[which(!is.na(elop.raw$Latitude_Found)),]
row.names(elop.comp) <- NULL
lines <- list()
for (i in 1:nrow(elop.comp)) {
lines[[i]] <- Lines(list(Line(rbind(c(elop.comp$Longtitude_Origin[i],elop.comp$Latitude_Origin[i]), c(elop.comp$Longtitude_Found[i], elop.comp$Latitude_Found[i]) ))), as.character(i))
#print(i)
}
complete.lines <- SpatialLinesDataFrame(SpatialLines(lines),elop.comp)
rm(list=ls(all=TRUE)) # clear memory
library("rgdal","fileutils")
setwd("E:\\GIT_Checkouts\\Maps")
google = "+init=epsg:3857" #the coordinte system code for google's web mercator projection
latlong <- "+init=epsg:4326"
all.files <- Sys.glob("PathKMLs\\*.kml")
for(each.file in all.files){
print(each.file)
name <- ogrListLayers(each.file)[1]
each.sldf <- readOGR(dsn = each.file, layer = name, require_geomType="wkbLineString" )
each.sldf = spTransform(each.sldf, CRS(latlong))  #converts it from lat/long to web mercator
writeOGR(each.sldf, paste("SpatialData\\",substr(basename(each.file), 1, nchar(basename(each.file)) - 4),"_Lines.json",sep=""), layer="each.sldf", driver="GeoJSON")
}
rm(list=ls(all=TRUE)) # clear memory
args <- commandArgs(trailingOnly = TRUE)
print(args)
if (length(args) == 0){
working.directory <- "E:\\GIT_Checkouts\\Maps"
csv.folder <- "..\\Itineraries\\*structures.csv"
}else{
csv.folder <- args[1]
working.directory <- args[2]
}
setwd(working.directory)
packages<- c("maptools","rgdal","leaflet") # list the packages that you'll need
lapply(packages, require, character.only=T) # load the packages, if they don't load you might need to install them first
all.csvs <- Sys.glob(csv.folder)
latlong <- "+init=epsg:4326"
all.csvs
for(each.file in all.csvs){
print(each.file)
each.csv <- read.csv(each.file, stringsAsFactors = FALSE)
coordinates(each.csv)=~long+lat
proj4string(each.csv) = CRS(latlong)
writeOGR(each.csv, paste("SpatialData\\",unlist(strsplit(basename(each.file),"-structures"))[[1]],"_Points.json",sep=""), layer="each.csv", driver="GeoJSON")
}
View(each.csv)
rm(list=ls(all=TRUE)) # clear memory
#MLS Todo:
#Add Arrowheads to main map.
#Deal with multiple people in same place (randomize points).
#Find a good symbol for people that are found in the same city
# classification direction
packages<- c("maptools","rgdal","leaflet","htmlwidgets","shiny","ggmap","rsconnect", "leaflet.minicharts") # list the packages that you'll need
lapply(packages, require, character.only=T) # load the packages, if they don't load you might need to install them first
setwd("/home/matthew/GIT/R_Scripts/ministerial-elopements")
setwd("E:\\GIT_Checkouts\\R_Scripts\\ministerial-elopements")
latlong <- "+init=epsg:4326"
#Loading the geocoded data
elop.raw <- read.csv("ministerial_elopements_geocoded.csv",stringsAsFactors = F)
elop.raw$popupw <- paste(sep = "",  "<b>",elop.raw$Full_Name,"</b><br/>",
"What = ",elop.raw$Accusations,"<br/>",
"Origin = ",elop.raw$Location_Origin,"<br/>",
"Found = ",elop.raw$Location_Found,"<br/>"
) #A bit of HTML To make the popups on the lines
#Creating the Line objects out of the point objects:
elop.comp <- elop.raw[which(!is.na(elop.raw$Latitude_Found)),]
row.names(elop.comp) <- NULL
lines <- list()
for (i in 1:nrow(elop.comp)) {
lines[[i]] <- Lines(list(Line(rbind(c(elop.comp$Longtitude_Origin[i],elop.comp$Latitude_Origin[i]), c(elop.comp$Longtitude_Found[i], elop.comp$Latitude_Found[i]) ))), as.character(i))
#print(i)
}
complete.lines <- SpatialLinesDataFrame(SpatialLines(lines),elop.comp)
orig.spdf <- elop.raw[which(!is.na(elop.raw$Latitude_Origin)),]
orig.spdf$Longtitude_Origin <- orig.spdf$Longtitude_Origin - (runif(1)-.5)/10
orig.spdf$Latitude_Found <- orig.spdf$Longtitude_Found - (runif(1)-.5)/10
coordinates(orig.spdf)=~Longtitude_Origin+Latitude_Origin
proj4string(orig.spdf) <- CRS(latlong)
found.spdf <- elop.raw[which(!is.na(elop.raw$Latitude_Found)),]
coordinates(found.spdf)=~Longtitude_Found+Latitude_Found
proj4string(found.spdf) <- CRS(latlong)
elop.map <-elop.comp[which(elop.comp$Location_Origin != elop.comp$Location_Found),]
same.spdf <- elop.comp[which(elop.comp$Location_Origin == elop.comp$Location_Found),]
coordinates(same.spdf)=~Longtitude_Found+Latitude_Found
proj4string(same.spdf) <- CRS(latlong)
m <- leaflet()
m %>% addTiles() %>%
addMarkers(data = orig.spdf, popup = ~popupw, group = "Origin",clusterOptions = markerClusterOptions()) %>%
addMarkers(data = found.spdf, popup = ~popupw, group = "Found",clusterOptions = markerClusterOptions()) %>%
addCircleMarkers(data = same.spdf, popup = ~popupw, group = "Connections",color = "navy",radius=5) %>%
addLayersControl(
overlayGroups = c("Origin", "Found","Connections"),
options = layersControlOptions(collapsed = FALSE)
)%>%
addFlows(
elop.map$Longtitude_Origin, elop.map$Latitude_Origin, elop.map$Longtitude_Found, elop.map$Latitude_Found,
# flow = .01,
maxThickness = 2,
color = "navy",
popup = popupArgs(showTitle = F, showValues = T, labels = NULL,
supValues = NULL, supLabels = colnames(elop.map), html = "popupw",
noPopup = T, digits = NULL)
)%>% # end add flows
addPolylines(data = complete.lines, popup = ~popupw, group = "Connections")
m %>% addTiles() %>%
addMarkers(data = orig.spdf, popup = ~popupw, group = "Origin") %>%
addMarkers(data = found.spdf, popup = ~popupw, group = "Found",clusterOptions = markerClusterOptions()) %>%
addCircleMarkers(data = same.spdf, popup = ~popupw, group = "Connections",color = "navy",radius=5) %>%
addLayersControl(
overlayGroups = c("Origin", "Found","Connections"),
options = layersControlOptions(collapsed = FALSE)
)%>%
addFlows(
elop.map$Longtitude_Origin, elop.map$Latitude_Origin, elop.map$Longtitude_Found, elop.map$Latitude_Found,
# flow = .01,
maxThickness = 2,
color = "navy",
popup = popupArgs(showTitle = F, showValues = T, labels = NULL,
supValues = NULL, supLabels = colnames(elop.map), html = "popupw",
noPopup = T, digits = NULL)
)%>% # end add flows
addPolylines(data = complete.lines, popup = ~popupw, group = "Connections")
orig.spdf <- elop.raw[which(!is.na(elop.raw$Latitude_Origin)),]
orig.spdf$Latitude_Origin <- orig.spdf$Latitude_Origin - (runif(1)-.5)/10
orig.spdf$Longtitude_Origin <- orig.spdf$Longtitude_Origin - (runif(1)-.5)/10
coordinates(orig.spdf)=~Longtitude_Origin+Latitude_Origin
proj4string(orig.spdf) <- CRS(latlong)
found.spdf <- elop.raw[which(!is.na(elop.raw$Latitude_Found)),]
coordinates(found.spdf)=~Longtitude_Found+Latitude_Found
proj4string(found.spdf) <- CRS(latlong)
elop.map <-elop.comp[which(elop.comp$Location_Origin != elop.comp$Location_Found),]
same.spdf <- elop.comp[which(elop.comp$Location_Origin == elop.comp$Location_Found),]
coordinates(same.spdf)=~Longtitude_Found+Latitude_Found
proj4string(same.spdf) <- CRS(latlong)
m <- leaflet()
m %>% addTiles() %>%
addMarkers(data = orig.spdf, popup = ~popupw, group = "Origin") %>%
addMarkers(data = found.spdf, popup = ~popupw, group = "Found",clusterOptions = markerClusterOptions()) %>%
addCircleMarkers(data = same.spdf, popup = ~popupw, group = "Connections",color = "navy",radius=5) %>%
addLayersControl(
overlayGroups = c("Origin", "Found","Connections"),
options = layersControlOptions(collapsed = FALSE)
)%>%
addFlows(
elop.map$Longtitude_Origin, elop.map$Latitude_Origin, elop.map$Longtitude_Found, elop.map$Latitude_Found,
# flow = .01,
maxThickness = 2,
color = "navy",
popup = popupArgs(showTitle = F, showValues = T, labels = NULL,
supValues = NULL, supLabels = colnames(elop.map), html = "popupw",
noPopup = T, digits = NULL)
)%>% # end add flows
addPolylines(data = complete.lines, popup = ~popupw, group = "Connections")
orig.spdf <- elop.raw[which(!is.na(elop.raw$Latitude_Origin)),]
View(orig.spdf)
(runif(1)-.5)/10
(runif(1)-.5)/10
(runif(1)-.5)/10
orig.spdf$Longtitude_Origin - (runif(1)-.5)/10
orig.spdf$Longtitude_Origin[1] - (runif(1)-.5)/10
orig.spdf$Longtitude_Origin[1] - (runif(1)-.5)/10
orig.spdf$Longtitude_Origin[1] - (runif(1)-.5)/10
orig.spdf$Longtitude_Origin[1] - (runif(1)-.5)/10
orig.spdf$Longtitude_Origin[1] - (runif(1)-.5)/10
orig.spdf$Longtitude_Origin[1] - (runif(1)-.5)/10
orig.spdf$Longtitude_Origin[1] - (runif(1)-.5)/10
orig.spdf$Longtitude_Origin[1] - (runif(1)-.5)/10
orig.spdf$Longtitude_Origin[1] - (runif(1)-.5)/10
orig.spdf$Longtitude_Origin[1] - (runif(1)-.5)/10
orig.spdf <- elop.raw[which(!is.na(elop.raw$Latitude_Origin)),]
orig.spdf$Latitude_Origin <- orig.spdf$Latitude_Origin - (runif(1)-.5)/10
orig.spdf$Longtitude_Origin <- orig.spdf$Longtitude_Origin - (runif(1)-.5)/10
View(orig.spdf)
orig.spdf$Latitude_Origin <- (runif(1)-.5)/10
View(orig.spdf)
orig.spdf$Latitude_Origin <- orig.spdf$Latitude_Origin - (runif(266)-.5)/10
View(orig.spdf)
orig.spdf <- elop.raw[which(!is.na(elop.raw$Latitude_Origin)),]
orig.spdf <- elop.raw[which(!is.na(elop.raw$Latitude_Origin)),]
orig.spdf$Latitude_Origin <- orig.spdf$Latitude_Origin - (runif(nrow(orig.spdf))-.5)/10
orig.spdf$Longtitude_Origin <- orig.spdf$Longtitude_Origin - (runif(nrow(orig.spdf))-.5)/10
coordinates(orig.spdf)=~Longtitude_Origin+Latitude_Origin
proj4string(orig.spdf) <- CRS(latlong)
found.spdf <- elop.raw[which(!is.na(elop.raw$Latitude_Found)),]
coordinates(found.spdf)=~Longtitude_Found+Latitude_Found
proj4string(found.spdf) <- CRS(latlong)
elop.map <-elop.comp[which(elop.comp$Location_Origin != elop.comp$Location_Found),]
same.spdf <- elop.comp[which(elop.comp$Location_Origin == elop.comp$Location_Found),]
coordinates(same.spdf)=~Longtitude_Found+Latitude_Found
proj4string(same.spdf) <- CRS(latlong)
m <- leaflet()
m %>% addTiles() %>%
addMarkers(data = orig.spdf, popup = ~popupw, group = "Origin") %>%
addMarkers(data = found.spdf, popup = ~popupw, group = "Found",clusterOptions = markerClusterOptions()) %>%
addCircleMarkers(data = same.spdf, popup = ~popupw, group = "Connections",color = "navy",radius=5) %>%
addLayersControl(
overlayGroups = c("Origin", "Found","Connections"),
options = layersControlOptions(collapsed = FALSE)
)%>%
addFlows(
elop.map$Longtitude_Origin, elop.map$Latitude_Origin, elop.map$Longtitude_Found, elop.map$Latitude_Found,
# flow = .01,
maxThickness = 2,
color = "navy",
popup = popupArgs(showTitle = F, showValues = T, labels = NULL,
supValues = NULL, supLabels = colnames(elop.map), html = "popupw",
noPopup = T, digits = NULL)
)%>% # end add flows
addPolylines(data = complete.lines, popup = ~popupw, group = "Connections")
