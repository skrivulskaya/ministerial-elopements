runApp('Box Sync/Dissertation Stuff/Dissertation/R/Ministerial_Elopements_Shiny')
runApp('Desktop/R Shiny Lesson')
library(shiny)
bcl <- read.csv("bcl-data.csv", stringsAsFactors = F)
ui <- fluidPage()
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
bcl <- read.csv("bcl-data.csv", stringsAsFactors = F)
ui <- fluidPage()
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
runApp('Desktop/R Shiny Lesson')
runApp('Desktop/R Shiny Lesson')
library(shiny)
bcl <- read.csv("bcl-data.csv", stringsAsFactors = FALSE)
ui <- fluidPage("BC Liquor Store", "prices")
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
runApp('Desktop/R Shiny Lesson')
library(shiny)
bcl <- read.csv("bcl-data.csv", stringsAsFactors = FALSE)
ui <- fluidPage("BC Liquor Store", "Prices")
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
bcl <- read.csv("bcl-data.csv", stringsAsFactors = FALSE)
ui <- fluidPage(
h1("My app"),
"BC",
"Liquor",
br(),
"Store",
strong("prices")
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
runApp('Desktop/R Shiny Lesson')
?titlePanel
runApp('Desktop/R Shiny Lesson')
library(shiny)
bcl <- read.csv("bcl-data.csv", stringsAsFactors = FALSE)
ui <- fluidPage(
titlePanel("BC Liquor Store Prices"),
windowTitle("BC Liquor Store Prices Shiny App")
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
runApp('Desktop/R Shiny Lesson')
runApp('Desktop/R Shiny Lesson')
library(shiny)
bcl <- read.csv("bcl-data.csv", stringsAsFactors = FALSE)
ui <- fluidPage(
titlePanel("BC Liquor Store Prices")
)
sidebarLayout(
sidebarPanel("our inputs will go here"),
mainPanel("the results will go here")
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
runApp('Desktop/R Shiny Lesson')
runApp('Desktop/R Shiny Lesson')
runApp('Desktop/R Shiny Lesson')
?column
runApp('Desktop/R Shiny Lesson')
runApp('Desktop/R Shiny Lesson')
library(shiny)
bcl <- read.csv("bcl-data.csv", stringsAsFactors = FALSE)
ui <- fluidPage(
#Application title
titlePanel("BC Liquor Store Prices"),
sidebarLayout(
sidebarPanel("our inputs will go here"),
mainPanel("the results will go here")
)
)
# Server logic
server <- function(input, output) {}
ui<-fluidPage(
fluidRow(column(width = 4,
"4"),
column(width = 3, offset = 2, "3 offset 2")
)
)
shinyApp(ui = ui, server = server)
runApp('Desktop/R Shiny Lesson')
library(shiny)
bcl <- read.csv("bcl-data.csv", stringsAsFactors = FALSE)
ui <- fluidPage(
#Application title
titlePanel("BC Liquor Store Prices"),
sidebarLayout(
sidebarPanel("our inputs will go here"),
mainPanel("the results will go here")
)
)
# Server logic
server <- function(input, output) {}
ui<-fluidPage(
fluidRow(column(width = 4,
"4"),
column(width = 3, offset = 2, "3 offset 2")
)
)
source('~/Desktop/R Shiny Lesson/app.R')
source('~/Desktop/R Shiny Lesson/app.R')
library(shiny)
bcl <- read.csv("bcl-data.csv", stringsAsFactors = FALSE)
ui <- fluidPage(
#Application title
titlePanel("BC Liquor Store Prices"),
sidebarLayout(
sidebarPanel("our inputs will go here"),
mainPanel("the results will go here")
)
)
# Server logic
server <- function(input, output) {}
source('~/Desktop/R Shiny Lesson/app.R')
library(shiny)
bcl <- read.csv("bcl-data.csv", stringsAsFactors = FALSE)
ui <- fluidPage(
#Application title
titlePanel("BC Liquor Store Prices"),
sidebarLayout(
sidebarPanel("our inputs will go here"),
mainPanel("the results will go here")
)
)
# Server logic
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
source('~/Desktop/R Shiny Lesson/app.R')
runApp('Desktop/R Shiny Lesson')
print(ui)
sliderInput("priceInput," "Price", min = 0, max = 100,
value = c(25, 50), pre = "$")
source('~/Desktop/R Shiny Lesson/app.R')
runApp('Desktop/R Shiny Lesson')
library(shiny)
bcl <- read.csv("bcl-data.csv", stringsAsFactors = FALSE)
ui <- fluidPage(
#Application title
titlePanel("BC Liquor Store Prices"),
sidebarLayout(
sidebarPanel(
sliderInput("priceInput," "Price", min = 0, max = 100,
value = c(25, 50), pre = "$")
),
mainPanel("the results will go here")
)
)
# Server logic
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
runApp('Desktop/R Shiny Lesson')
library(shiny)
bcl <- read.csv("bcl-data.csv", stringsAsFactors = FALSE)
ui <- fluidPage(
#Application title
titlePanel("BC Liquor Store Prices"),
sidebarLayout(
sidebarPanel(
sliderInput("priceInput," "Price", min = 0, max = 100,
value = c(25, 50), pre = "$")
),
mainPanel("the results will go here")
)
)
# Server logic
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
source('~/Desktop/R Shiny Lesson/app.R')
runApp('Desktop/R Shiny Lesson')
source('~/Desktop/R Shiny Lesson/app.R')
runApp('Desktop/R Shiny Lesson')
library(shiny)
bcl <- read.csv("bcl-data.csv", stringsAsFactors = FALSE)
ui <- fluidPage(
#Application title
titlePanel("BC Liquor Store Prices"),
sidebarLayout(
sidebarPanel(
sliderInput("priceInput," "Price", min = 0, max = 100,
value = c(25, 40), pre = "$")
),
mainPanel("the results will go here")
)
)
# Server logic
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
runApp('Desktop/R Shiny Lesson')
source('~/Desktop/R Shiny Lesson/app.R')
library(shiny)
bcl <- read.csv("bcl-data.csv", stringsAsFactors = FALSE)
ui <- fluidPage(
#Application title
titlePanel("BC Liquor Store Prices"),
sidebarLayout(
sidebarPanel(
sliderInput("priceInput," "Price", min = 0, max = 100,
value = c(25, 40), pre = "$")
),
mainPanel("the results will go here")
)
)
# Server logic
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
runApp('Desktop/R Shiny Lesson')
library(shiny)
bcl <- read.csv("bcl-data.csv", stringsAsFactors = FALSE)
source('~/Desktop/R Shiny Lesson/app.R')
library(shiny)
bcl <- read.csv("bcl-data.csv", stringsAsFactors = FALSE)
runApp('Desktop/R Shiny Lesson')
runApp('Desktop/R Shiny Lesson')
setwd("")
source('~/Desktop/R Shiny Lesson/app.R')
library(shiny)
bcl <- read.csv("bcl-data.csv", stringsAsFactors = FALSE)
ui <- fluidPage(
#Application title
titlePanel("BC Liquor Store Prices"),
sidebarLayout(
sidebarPanel(
sliderInput("priceInput," "Price", min = 0, max = 100,
value = c(25, 40), pre = "$")
),
mainPanel("the results will go here")
)
)
# Server logic
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
source('~/Desktop/R Shiny Lesson/app.R')
packages<- c("rgdal","leaflet","htmlwidgets","shiny","ggmap") # list the packages that you'll need
library(rgdal)
library(leaflet)
library(shiny)
library(ggmap)
# setwd("/Users/suzannakrivulskaya/Box Sync/Dissertation Stuff/Dissertation/Data/ministerial-elopements")
latlong <- "+init=epsg:4326"
#Loading the geocoded data
elop.raw <- read.csv("ministerial_elopements_geocoded.csv",stringsAsFactors = F)
rm(list=ls(all=TRUE)) # clear memory
packages<- c("rgdal","leaflet","htmlwidgets","shiny","ggmap") # list the packages that you'll need
library(rgdal)
library(leaflet)
library(shiny)
library(ggmap)
# setwd("/Users/suzannakrivulskaya/Box Sync/Dissertation Stuff/Dissertation/Data/ministerial-elopements")
latlong <- "+init=epsg:4326"
#Loading the geocoded data
elop.raw <- read.csv("ministerial_elopements_geocoded.csv",stringsAsFactors = F)
?wd
wd
getwd
get(wd)
setwd("/Users/suzannakrivulskaya/Box Sync/Dissertation Stuff/Dissertation/Data/ministerial-elopements")
latlong <- "+init=epsg:4326"
#Loading the geocoded data
elop.raw <- read.csv("ministerial_elopements_geocoded.csv",stringsAsFactors = F)
runApp()
elop.raw$popupw <- paste(sep = "",  "<b>",elop.raw$Full_Name,"</b><br/>",
"Accusation = ",elop.raw$Accusations,"<br/>",
"Origin = ",elop.raw$Location_Origin,"<br/>",
"Found = ",elop.raw$Location_Found,"<br/>"
) #A bit of HTML To make the popups on the lines
#Creating the Line objects out of the point objects:
elop.comp <- elop.raw[which(!is.na(elop.raw$Latitude_Found)),]
lines <- list()
for (i in 1:nrow(elop.comp)) {
lines[[i]] <- Lines(list(Line(rbind(c(elop.comp$Longtitude_Origin[i],elop.comp$Latitude_Origin[i]), c(elop.comp$Longtitude_Found[i], elop.comp$Latitude_Found[i]) ))), as.character(i))
#print(i)
}
complete.lines <- SpatialLinesDataFrame(SpatialLines(lines),elop.comp)
View(elop.comp)
View(elop.raw)
runApp()
runApp()
rm(list=ls(all=TRUE)) # clear memory
packages<- c("maptools","rgdal","leaflet","htmlwidgets","shiny","ggmap","rsconnect", "leaflet.minicharts") # list the packages that you'll need
lapply(packages, require, character.only=T) # load the packages, if they don't load you might need to install them first
setwd("/home/matthew/GIT/R_Scripts/ministerial-elopements")
latlong <- "+init=epsg:4326"
#Loading the geocoded data
elop.raw <- read.csv("ministerial_elopements_geocoded.csv",stringsAsFactors = F)
elop.raw$popupw <- paste(sep = "",  "<b>",elop.raw$Full_Name,"</b><br/>",
"Name = ",elop.raw$Accusations,"<br/>",
"Origin = ",elop.raw$Location_Origin,"<br/>",
"Found = ",elop.raw$Location_Found,"<br/>"
) #A bit of HTML To make the popups on the lines
#Creating the Line objects out of the point objects:
elop.comp <- elop.raw[which(!is.na(elop.raw$Latitude_Found)),]
lines <- list()
for (i in 1:nrow(elop.comp)) {
lines[[i]] <- Lines(list(Line(rbind(c(elop.comp$Longtitude_Origin[i],elop.comp$Latitude_Origin[i]), c(elop.comp$Longtitude_Found[i], elop.comp$Latitude_Found[i]) ))), as.character(i))
#print(i)
}
complete.lines <- SpatialLinesDataFrame(SpatialLines(lines),elop.comp)
runApp()
runApp()
runApp()
packages<- c("rgdal","leaflet","htmlwidgets","shiny","ggmap") # list the packages that you'll need
library(rgdal)
library(leaflet)
library(shiny)
library(ggmap)
setwd("/Users/suzannakrivulskaya/Box Sync/Dissertation Stuff/Dissertation/Data/ministerial-elopements")
latlong <- "+init=epsg:4326"
elop.raw <- read.csv("ministerial_elopements_geocoded.csv",stringsAsFactors = F)
elop.raw$popupw <- paste(sep = "",  "<b>",elop.raw$Full_Name,"</b><br/>",
"Accusation = ",elop.raw$Accusations,"<br/>",
"Origin = ",elop.raw$Location_Origin,"<br/>",
"Found = ",elop.raw$Location_Found,"<br/>"
) #A bit of HTML To make the popups on the lines
elop.comp <- elop.raw[which(!is.na(elop.raw$Latitude_Found)),]
lines <- list()
for (i in 1:nrow(elop.comp)) {
lines[[i]] <- Lines(list(Line(rbind(c(elop.comp$Longtitude_Origin[i],elop.comp$Latitude_Origin[i]), c(elop.comp$Longtitude_Found[i], elop.comp$Latitude_Found[i]) ))), as.character(i))
#print(i)
}
complete.lines <- SpatialLinesDataFrame(SpatialLines(lines),elop.comp)
orig.spdf <- elop.raw[which(!is.na(elop.raw$Latitude_Origin)),]
coordinates(orig.spdf)=~Longtitude_Origin+Latitude_Origin
proj4string(orig.spdf) <- CRS(latlong)
found.spdf <- elop.raw[which(!is.na(elop.raw$Latitude_Found)),]
coordinates(found.spdf)=~Longtitude_Found+Latitude_Found
proj4string(found.spdf) <- CRS(latlong)
ui <- fluidPage(
leafletOutput("mymap"),
p(),
sliderInput("range", "Range:",
min = 1870, max = 1915,
value = c(1870,1915), sep = ""),
# selectInput("decade", "Decade:",
#             c("all", "1870s","1880s","1890s","1900s","1910-1914")),
selectizeInput("denomination", "Denomination:",
choices = c("all", sort(unique(elop.raw$Denomination_for_Tableau)))),
checkboxInput("CompCheck","Complete cases", value = FALSE, width = NULL)
)
server <- function(input, output, session) {
points <- eventReactive(c(input$range, input$denomination, input$CompCheck), {
working.spdf <- orig.spdf
if(input$CompCheck){
working.spdf <- orig.spdf[which(!is.na(orig.spdf$Latitude_Found)),]
}
if (input$denomination == "all"){
return(working.spdf[which(working.spdf$Year >= input$range[1] & working.spdf$Year <= input$range[2]),])
}else{
return(working.spdf[which(working.spdf$Year >= input$range[1] & working.spdf$Year <= input$range[2] & working.spdf$Denomination_for_Tableau == input$denomination),])
}
}, ignoreNULL = FALSE)#end points1
points2 <- eventReactive(c(input$range, input$denomination), {
if (input$denomination == "all"){
found.spdf[which(found.spdf$Year >= input$range[1] & found.spdf$Year <= input$range[2]),]
}else{
found.spdf[which(found.spdf$Year >= input$range[1] & found.spdf$Year <= input$range[2] & found.spdf$Denomination_for_Tableau == input$denomination),]
}
}, ignoreNULL = FALSE)#end points1
lines <- eventReactive(c(input$range, input$denomination), {
if (input$denomination == "all"){
print(nrow(complete.lines))
complete.lines[which(complete.lines$Year >= input$range[1] & complete.lines$Year <= input$range[2]),]
}else{
complete.lines[which(complete.lines$Year >= input$range[1] & complete.lines$Year <= input$range[2] & complete.lines$Denomination_for_Tableau == input$denomination),]
}
}, ignoreNULL = FALSE)#end points1
output$mymap <- renderLeaflet({
leaflet() %>%
fitBounds(-129,24.2,-65.58,50.54)%>%
addProviderTiles(providers$Stamen.TonerLite, options = providerTileOptions(noWrap = TRUE)) %>%
addLayersControl(
overlayGroups = c("Origin", "Found","Connections"),
options = layersControlOptions(collapsed = FALSE)
)
# addPolylines(data = complete.lines, popup = ~popupw, group = "Connections")
# %>% addMarkers(data = points())
})
observe({
leafletProxy("mymap") %>%
clearMarkers() %>%
clearMarkerClusters() %>%
clearShapes()%>%
# addMarkers(data = points()) %>%
# addMarkers(data = points(), popup = ~popupw, group = "Origin") %>%
# addMarkers(data = points2(), popup = ~popupw, group = "Found")#,clusterOptions = markerClusterOptions())
addCircleMarkers(data = points(), popup = ~popupw, group = "Origin",color = "gray",radius=3)%>%
addCircleMarkers(data = points2(), popup = ~popupw, group = "Found",color = "green",radius=3)%>%#,clusterOptions = markerClusterOptions())
addPolylines(data = lines(), popup = ~popupw, group = "Connections")
})
}
shinyApp(ui, server)
runApp()
View(elop.raw)
packages<- c("rgdal","leaflet","htmlwidgets","shiny","ggmap") # list the packages that you'll need
library(rgdal)
library(leaflet)
library(shiny)
library(ggmap)
setwd("/Users/suzannakrivulskaya/Box Sync/Dissertation Stuff/Dissertation/Data/ministerial-elopements")
latlong <- "+init=epsg:4326"
elop.raw <- read.csv("ministerial_elopements_geocoded.csv",stringsAsFactors = F)
elop.raw$popupw <- paste(sep = "",  "<b>",elop.raw$Full_Name,"</b><br/>",
"Accusation = ",elop.raw$Accusations,"<br/>",
"Origin = ",elop.raw$Location_Origin,"<br/>",
"Found = ",elop.raw$Location_Found,"<br/>"
) #A bit of HTML To make the popups on the lines
elop.comp <- elop.raw[which(!is.na(elop.raw$Latitude_Found)),]
lines <- list()
for (i in 1:nrow(elop.comp)) {
lines[[i]] <- Lines(list(Line(rbind(c(elop.comp$Longtitude_Origin[i],elop.comp$Latitude_Origin[i]), c(elop.comp$Longtitude_Found[i], elop.comp$Latitude_Found[i]) ))), as.character(i))
#print(i)
}
complete.lines <- SpatialLinesDataFrame(SpatialLines(lines),elop.comp)
View(elop.comp)
View(elop.comp)
row.names(elop.comp) <- NULL
View(elop.comp)
lines <- list()
for (i in 1:nrow(elop.comp)) {
lines[[i]] <- Lines(list(Line(rbind(c(elop.comp$Longtitude_Origin[i],elop.comp$Latitude_Origin[i]), c(elop.comp$Longtitude_Found[i], elop.comp$Latitude_Found[i]) ))), as.character(i))
#print(i)
}
complete.lines <- SpatialLinesDataFrame(SpatialLines(lines),elop.comp)
orig.spdf <- elop.raw[which(!is.na(elop.raw$Latitude_Origin)),]
coordinates(orig.spdf)=~Longtitude_Origin+Latitude_Origin
proj4string(orig.spdf) <- CRS(latlong)
found.spdf <- elop.raw[which(!is.na(elop.raw$Latitude_Found)),]
coordinates(found.spdf)=~Longtitude_Found+Latitude_Found
proj4string(found.spdf) <- CRS(latlong)
ui <- fluidPage(
leafletOutput("mymap"),
p(),
sliderInput("range", "Range:",
min = 1870, max = 1915,
value = c(1870,1915), sep = ""),
# selectInput("decade", "Decade:",
#             c("all", "1870s","1880s","1890s","1900s","1910-1914")),
selectizeInput("denomination", "Denomination:",
choices = c("all", sort(unique(elop.raw$Denomination_for_Tableau)))),
checkboxInput("CompCheck","Complete cases", value = FALSE, width = NULL)
)
server <- function(input, output, session) {
points <- eventReactive(c(input$range, input$denomination, input$CompCheck), {
working.spdf <- orig.spdf
if(input$CompCheck){
working.spdf <- orig.spdf[which(!is.na(orig.spdf$Latitude_Found)),]
}
if (input$denomination == "all"){
return(working.spdf[which(working.spdf$Year >= input$range[1] & working.spdf$Year <= input$range[2]),])
}else{
return(working.spdf[which(working.spdf$Year >= input$range[1] & working.spdf$Year <= input$range[2] & working.spdf$Denomination_for_Tableau == input$denomination),])
}
}, ignoreNULL = FALSE)#end points1
points2 <- eventReactive(c(input$range, input$denomination), {
if (input$denomination == "all"){
found.spdf[which(found.spdf$Year >= input$range[1] & found.spdf$Year <= input$range[2]),]
}else{
found.spdf[which(found.spdf$Year >= input$range[1] & found.spdf$Year <= input$range[2] & found.spdf$Denomination_for_Tableau == input$denomination),]
}
}, ignoreNULL = FALSE)#end points1
lines <- eventReactive(c(input$range, input$denomination), {
if (input$denomination == "all"){
print(nrow(complete.lines))
complete.lines[which(complete.lines$Year >= input$range[1] & complete.lines$Year <= input$range[2]),]
}else{
complete.lines[which(complete.lines$Year >= input$range[1] & complete.lines$Year <= input$range[2] & complete.lines$Denomination_for_Tableau == input$denomination),]
}
}, ignoreNULL = FALSE)#end points1
output$mymap <- renderLeaflet({
leaflet() %>%
fitBounds(-129,24.2,-65.58,50.54)%>%
addProviderTiles(providers$Stamen.TonerLite, options = providerTileOptions(noWrap = TRUE)) %>%
addLayersControl(
overlayGroups = c("Origin", "Found","Connections"),
options = layersControlOptions(collapsed = FALSE)
)
# addPolylines(data = complete.lines, popup = ~popupw, group = "Connections")
# %>% addMarkers(data = points())
})
observe({
leafletProxy("mymap") %>%
clearMarkers() %>%
clearMarkerClusters() %>%
clearShapes()%>%
# addMarkers(data = points()) %>%
# addMarkers(data = points(), popup = ~popupw, group = "Origin") %>%
# addMarkers(data = points2(), popup = ~popupw, group = "Found")#,clusterOptions = markerClusterOptions())
addCircleMarkers(data = points(), popup = ~popupw, group = "Origin",color = "gray",radius=3)%>%
addCircleMarkers(data = points2(), popup = ~popupw, group = "Found",color = "green",radius=3)%>%#,clusterOptions = markerClusterOptions())
addPolylines(data = lines(), popup = ~popupw, group = "Connections")
})
}
shinyApp(ui, server)
rm(list=ls(all=TRUE)) # clear memory
#MLS Todo: Add Arrowheads to main map. Deal with multiple people in same place (randomize points). Find a good symbol for people that are found in the same city
# classification direction
packages<- c("maptools","rgdal","leaflet","htmlwidgets","shiny","ggmap","rsconnect", "leaflet.minicharts") # list the packages that you'll need
lapply(packages, require, character.only=T) # load the packages, if they don't load you might need to install them first
setwd("/home/matthew/GIT/R_Scripts/ministerial-elopements")
latlong <- "+init=epsg:4326"
elop.raw <- read.csv("ministerial_elopements_geocoded.csv",stringsAsFactors = F)
elop.raw$popupw <- paste(sep = "",  "<b>",elop.raw$Full_Name,"</b><br/>",
"Name = ",elop.raw$Accusations,"<br/>",
"Origin = ",elop.raw$Location_Origin,"<br/>",
"Found = ",elop.raw$Location_Found,"<br/>"
) #A bit of HTML To make the popups on the lines
elop.comp <- elop.raw[which(!is.na(elop.raw$Latitude_Found)),]
