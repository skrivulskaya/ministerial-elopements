runApp()
runApp()
runApp()
rm(list=ls(all=TRUE))
runApp()
rm(list=ls(all=TRUE)) # clear memory
runApp()
runApp()
rm(list=ls(all=TRUE)) # clear memory
runApp()
?outputID
?outputId
plotOutput("coolplot")
runApp('~/Desktop/R Shiny Lesson')
runApp('~/Desktop/R Shiny Lesson')
runApp('~/Desktop/R Shiny Lesson')
runApp()
runApp('~/Desktop/R Shiny Lesson')
runApp('~/Desktop/R Shiny Lesson')
runApp('~/Desktop/R Shiny Lesson')
runApp('~/Desktop/R Shiny Lesson')
?textOutput()
runApp('~/Desktop/R Shiny Lesson')
runApp('~/Desktop/R Shiny Lesson')
runApp('~/Desktop/R Shiny Lesson')
runApp('~/Desktop/R Shiny Lesson')
runApp('~/Desktop/R Shiny Lesson')
runApp('~/Desktop/R Shiny Lesson')
runApp('~/Desktop/R Shiny Lesson')
runApp('~/Desktop/R Shiny Lesson')
runApp('~/Desktop/R Shiny Lesson')
runApp('~/Desktop/R Shiny Lesson')
runApp('~/Desktop/R Shiny Lesson')
runApp('~/Desktop/R Shiny Lesson')
runApp('~/Desktop/R Shiny Lesson')
runApp('~/Desktop/R Shiny Lesson')
runApp('~/Desktop/R Shiny Lesson')
runApp('~/Desktop/R Shiny Lesson')
runApp('~/Desktop/R Shiny Lesson')
runApp('~/Desktop/R Shiny Lesson')
library(shiny)
ui <- fluidPage(
numericInput("num", "Maximum slider value", 5),
uiOutput("slider")
)
server <- function(input, output) {
output$slider <- renderUI({
sliderInput("slider", "Slider", min = 0,
max = input$num, value = 0)
})
}
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
runApp('~/Desktop/R Shiny Lesson')
library(shiny)
library(ggplot2)
library(dplyr)
bcl <- read.csv("bcl-data.csv", stringsAsFactors = FALSE)
ui <- fluidPage(
titlePanel("BC Liquor Store prices"),
sidebarLayout(
sidebarPanel(
sliderInput("priceInput", "Price", 0, 100, c(25, 40), pre = "$"),
radioButtons("typeInput", "Product type",
choices = c("BEER", "REFRESHMENT", "SPIRITS", "WINE"),
selected = "WINE"),
uiOutput("countryOutput")
),
mainPanel(
plotOutput("coolplot"),
br(), br(),
tableOutput("results")
)
)
)
server <- function(input, output) {
output$countryOutput <- renderUI({
selectInput("countryInput", "Country",
sort(unique(bcl$Country)),
selected = "CANADA")
})
filtered <- reactive({
if (is.null(input$countryInput)) {
return(NULL)
}
bcl %>%
filter(Price >= input$priceInput[1],
Price <= input$priceInput[2],
Type == input$typeInput,
Country == input$countryInput
)
})
output$coolplot <- renderPlot({
if (is.null(filtered())) {
return()
}
ggplot(filtered(), aes(Alcohol_Content)) +
geom_histogram()
})
output$results <- renderTable({
filtered()
})
}
shinyApp(ui = ui, server = server)
bcl <- read.csv("bcl-data.csv", stringsAsFactors = FALSE)
setwd("/Users/suzannakrivulskaya/Desktop/R Shiny Lesson")
bcl <- read.csv("bcl-data.csv", stringsAsFactors = FALSE)
ui <- fluidPage(
titlePanel("BC Liquor Store prices"),
sidebarLayout(
sidebarPanel(
sliderInput("priceInput", "Price", 0, 100, c(25, 40), pre = "$"),
radioButtons("typeInput", "Product type",
choices = c("BEER", "REFRESHMENT", "SPIRITS", "WINE"),
selected = "WINE"),
uiOutput("countryOutput")
),
mainPanel(
plotOutput("coolplot"),
br(), br(),
tableOutput("results")
)
)
)
server <- function(input, output) {
output$countryOutput <- renderUI({
selectInput("countryInput", "Country",
sort(unique(bcl$Country)),
selected = "CANADA")
})
filtered <- reactive({
if (is.null(input$countryInput)) {
return(NULL)
}
bcl %>%
filter(Price >= input$priceInput[1],
Price <= input$priceInput[2],
Type == input$typeInput,
Country == input$countryInput
)
})
output$coolplot <- renderPlot({
if (is.null(filtered())) {
return()
}
ggplot(filtered(), aes(Alcohol_Content)) +
geom_histogram()
})
output$results <- renderTable({
filtered()
})
}
filtered()
output$results <- renderTable({
filtered()
})
server <- function(input, output) {
output$countryOutput <- renderUI({
selectInput("countryInput", "Country",
sort(unique(bcl$Country)),
selected = "CANADA")
})
filtered <- reactive({
if (is.null(input$countryInput)) {
return(NULL)
}
bcl %>%
filter(Price >= input$priceInput[1],
Price <= input$priceInput[2],
Type == input$typeInput,
Country == input$countryInput
)
})
output$coolplot <- renderPlot({
if (is.null(filtered())) {
return()
}
ggplot(filtered(), aes(Alcohol_Content)) +
geom_histogram()
})
output$results <- renderTable({
filtered()
})
}
shinyApp(ui = ui, server = server)
runApp()
rm(list=ls(all=TRUE))
packages<- c("maptools","rgdal","leaflet","htmlwidgets","shiny","ggmap","rsconnect","ggplot2")
lapply(packages, require, character.only=T)
setwd("/Users/suzannakrivulskaya/Box Sync/Dissertation Stuff/Dissertation/Data/SK-shiny-testing")
latlong <- "+init=epsg:4326"
elop.raw$popupw <- paste(sep = "",  "<b>",elop.raw$Full_Name,"</b><br/>",
"Accusation = ",elop.raw$Accusations,"<br/>",
"Year = ",elop.raw$Year,"<br/>",
"Denomination = ",elop.raw$Denomination,"<br/>",
"Origin = ",elop.raw$Location_Origin,"<br/>",
"Found = ",elop.raw$Location_Found,"<br/>"
)
elop.raw <- read.csv("ministerial_elopements_geocoded.csv",stringsAsFactors = F)
elop.raw$popupw <- paste(sep = "",  "<b>",elop.raw$Full_Name,"</b><br/>",
"Accusation = ",elop.raw$Accusations,"<br/>",
"Year = ",elop.raw$Year,"<br/>",
"Denomination = ",elop.raw$Denomination,"<br/>",
"Origin = ",elop.raw$Location_Origin,"<br/>",
"Found = ",elop.raw$Location_Found,"<br/>"
)
?shiny::session
runApp()
runApp()
runApp()
?checkboxGroupInput()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ggplot(filtered, aes(Denomination))+
geom_histogram()
ggplot(data = elop.raw, aes)
# Generate some sample data, then compute mean and standard deviation
# in each group
df <- data.frame(
gp = factor(rep(letters[1:3], each = 10)),
y = rnorm(30)
)
ds <- plyr::ddply(df, "gp", plyr::summarise, mean = mean(y), sd = sd(y))
# The summary data frame ds is used to plot larger red points on top
# of the raw data. Note that we don't need to supply `data` or `mapping`
# in each layer because the defaults from ggplot() are used.
ggplot(df, aes(gp, y)) +
geom_point() +
geom_point(data = ds, aes(y = mean), colour = 'red', size = 3)
# Same plot as above, declaring only the data frame in ggplot().
# Note how the x and y aesthetics must now be declared in
# each geom_point() layer.
ggplot(df) +
geom_point(aes(gp, y)) +
geom_point(data = ds, aes(gp, mean), colour = 'red', size = 3)
# Alternatively we can fully specify the plot in each layer. This
# is not useful here, but can be more clear when working with complex
# mult-dataset graphics
ggplot() +
geom_point(data = df, aes(gp, y)) +
geom_point(data = ds, aes(gp, mean), colour = 'red', size = 3) +
geom_errorbar(
data = ds,
aes(gp, mean, ymin = mean - sd, ymax = mean + sd),
colour = 'red',
width = 0.4
)
ggplot(df) +
geom_point(aes(gp, y)) +
geom_point(data = ds, aes(gp, mean), colour = 'red', size = 3)
df <- data.frame(
gp = factor(rep(letters[1:3], each = 10)),
y = rnorm(30)
)
ds <- plyr::ddply(df, "gp", plyr::summarise, mean = mean(y), sd = sd(y))
ggplot(elop.raw, aes(elop.raw$Denomination_for_Tableau, elop.raw$Year))
ggplot(elop.raw, aes(elop.raw$Denomination_for_Tableau))
ggplot(elop.raw, aes(elop.raw$Denomination_for_Tableau, elop.raw$Year))+
geom_histogram()
ggplot(elop.raw, aes(elop.raw$Denomination_for_Tableau))+
+ geom_histogram()
ggplot(elop.raw, aes(elop.raw$Year)) + geom_point(aes(color = elop.raw$Denomination_for_Tableau)) +
scale_x_continuous("Year", breaks = seq(0,0.35,0.05))+
scale_y_continuous("Denomination", breaks = seq(0,270,by = 30))+
theme_bw() + labs(title="Scatterplot")
ggplot(elop.raw, aes(elop.raw$Year, elop.raw$Denomination_for_Tableau)) + geom_point(aes(color = elop.raw$Denomination_for_Tableau)) + scale_x_continuous("Year", breaks = seq(0,0.35,0.05))+
scale_y_continuous("Denomination", breaks = seq(0,270,by = 30))+
theme_bw() + labs(title="Scatterplot")
library(ggplot2)
ggplot(elop.raw, aes(Year, Denomination_for_Tableau)) + geom_point() + scale_x_continuous("Denomination_for_Tableau", breaks = seq(0,0.35,0.05))+ scale_y_continuous("Year", breaks = seq(0,270,by = 30))+ theme_bw()
View(elop.raw)
Denomi
install(plotly)
plotly
library(plotly)
install.packages(plotly)
install.packages("plotly")
library(plotly)
x<- elop.raw$Denomination_for_Tableau
y<-elop.raw
y<-elop.raw$Year
data <- elop.raw(x,y)
data<- data.frame(x,y)
p <- plot_ly(data, x = ~x, y = ~random_y, type = 'scatter', mode = 'lines')
chart_link = plotly_POST(p, filename="line/basic")
chart_link
trace_0 <- rnorm(100, mean = 5)
trace_1 <- rnorm(100, mean = 0)
trace_2 <- rnorm(100, mean = -5)
x <- c(1:100)
data <- data.frame(x, trace_0, trace_1, trace_2)
p <- plot_ly(data, x = ~x) %>%
add_trace(y = ~trace_0, name = 'trace 0',mode = 'lines') %>%
add_trace(y = ~trace_1, name = 'trace 1', mode = 'lines+markers') %>%
add_trace(y = ~trace_2, name = 'trace 2', mode = 'markers')
trace_0 <- rnorm(100, mean = 5)
trace_1 <- rnorm(100, mean = 0)
trace_2 <- rnorm(100, mean = -5)
x <- c(1:100)
data <- data.frame(x, trace_0, trace_1, trace_2)
p <- plot_ly(data, x = ~x, y = ~trace_0, name = 'trace 0', type = 'scatter', mode = 'lines') %>%
add_trace(y = ~trace_1, name = 'trace 1', mode = 'lines+markers') %>%
add_trace(y = ~trace_2, name = 'trace 2', mode = 'markers')
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = plotly_POST(p, filename="line/mode1")
chart_link
install.packages("dplyr")
install.packages("tidyr")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("tidyr")
install.packages("tidyr")
data <-elop.raw
head(data)
str(data)
?str(data)
?head(data)
names(data)
install.packages(c("tidyverse", "RSQLite"))
test <- <- <- <- <- <- <- <-
weight_kg <- 55    # doesn't print anything
(weight_kg <- 55)  # but putting parenthesis around the call prints the value of `weight_kg`
weight_kg
args(round)
?round
class(elop.raw$Year)
class(elop.raw$Denomination_for_Tableau)
length((elop.raw$Denomination_for_Tableau))
length(elop.raw)
length(unique(elop.raw$Denomination_for_Tableau))
age <- elop.raw$Age
age[!is.na(age)]
age
str(elop.raw)
ggplot(data = elop.raw)
ggplot(data = elop.raw, aes(x=Denomination_for_Tableau, y=Year))+
geom_lin()
ggplot(data = elop.raw, aes(x=Denomination_for_Tableau, y=Year))+
geom_line()
ggplot(data = elop.raw, aes(x=Year, y=Denomination_for_Tableau))+
geom_line()
ggplot(data = elop.raw, aes(x=Year, y=Denomination_for_Tableau))+
geom_point()
ggplot(data = elop.raw, aes(x=Year, y=Denomination_for_Tableau))+
geom_point()+
geom_histogram()
ggplot(data = elop.raw, aes(x=Year, y=Denomination_for_Tableau))+
geom_histogram()
ggplot(data = elop.raw, aes(x=Year, y=Denomination_for_Tableau))+
geom_histogram()
ggplot(data = elop.raw, aes(x=Year, y=Denomination_for_Tableau))+
geom_linerange()
ggplot(data = elop.raw, aes(x=Year, y=Denomination_for_Tableau))+
geom_line()
elop_plot<-ggplot(data = elop.raw, aes(x=Denomination_for_Tableau, y=Year))
elop_plot+
geom_point()
elop_plot<-ggplot(data = elop.raw, aes(x=Year, y=Denomination_for_Tableau))
elop_plot+
geom_point()
install.packages("hexbin")
library(hexbin)
elop_lot+
geom_hex()
elop_plot+
geom_hex()
ggplot(data = elop.raw, aes(x = Year, y = Denomination_for_Tableau)) +
geom_point(alpha = 0.1, aes(color = Denomination_for_Tableau))
elop_plot<-ggplot(data = elop.raw, aes(, y=Denomination_for_Tableau))
elop_plot<-ggplot(data = elop.raw, aes(, y=Denomination_for_Tableau))
elop_plot+
geom_point()
elop_plot<-ggplot(data = elop.raw, aes(y=Denomination_for_Tableau))
elop_plot+
geom_point()
elop_plot<-ggplot(data = elop.raw, aes(x=count,y=Denomination_for_Tableau))
elop_plot+
geom_point()
elop_plot<-ggplot(data = elop.raw, aes(x=norm(),y=Denomination_for_Tableau))
elop_plot+
geom_point()
ggplot(data = elop.raw, aes(x=Denomination_for_Tableau, y=Year))+
geom_line()
ggplot(data = elop.raw, aes(x=Year, y=norm()))+
geom_line()
ggplot(data = elop.raw, aes(x=Year, y=Denomination_for_Tableau()))+
geom_line()
ggplot(filtered, aes(Denomination))+
geom_histogram()
ggplot(filtedred, aes(Denomination))+
geom_histogram()
ggplot(elop.raw, aes(Denomination))+
geom_histogram()
ggplot(filtered, aes(Denomination, "count"))+
geom_histogram()
ggplot(elop.raw, aes(Denomination,"count"))+
geom_histogram()
ggplot(elop.raw, aes("count",Denomination))+
geom_histogram()
ggplot(data = elop.raw, aes(x = year, y = n)) +
geom_line()
elop.raw <- read.csv("ministerial_elopements_geocoded.csv",stringsAsFactors = F)
ggplot(data = elop.raw, aes(x = year, y = n)) +
+     geom_line()
denomination_by_year <- elop.raw %>%
group_by(Year, Denomination_for_Tableau) %>%
tally()
ggplot(data = denomination_by_year, aes(x = year, y = n)) +
geom_line()
denomination_by_decade <-
runApp()
denomination_by_year <- elop.raw %>%
group_by(Year, Denomination_for_Tableau) %>%
tally()
ggplot(data = denomination_by_year, aes(x = denomination_by_year, y = n)) +
geom_line()
denomination_by_year <- elop.raw %>%
group_by(Year, Denomination_for_Tableau) %>%
tally()
ggplot(data = denomination_by_year, aes(x = denomination_by_year, y = Denominations_for_Tableau)) +
geom_line()
denomination_by_year <- elop.raw %>%
group_by(Year, Denomination_for_Tableau) %>%
tally()
ggplot(data = denomination_by_year, aes(x = denomination_by_year, y = Denomination_for_Tableau)) +
geom_line()
View(denomination_by_year)
ggplot(data = denomination_by_year, aes(x = Year, y = Denomination_for_Tableau)) +
geom_line()
ggplot(data = denomination_by_year, aes(x = Year, y = n)) +
geom_line()
View(elop.raw)
View(elop.raw)
denomination_by_decade <- elop.raw %>%
group_by(Decade, Denomination_for_Tableau) %>%
tally()
ggplot(data = denomination_by_year, aes(x = Decade, y = Denomination_for_Tableau)) +
geom_line()
View(denomination_by_decade)
View(denomination_by_decade)
denomination_by_decade <- elop.raw %>%
group_by(Decade, Denomination_for_Tableau) %>%
tally()
ggplot(data = denomination_by_decade, aes(x = Decade, y = Denomination_for_Tableau)) +
geom_line()
decade_by_denomination <- elop.raw %>%
group_by(Denomination_for_Tableau, Decade) %>%
tally()
ggplot(data = decade_by_denomination, aes(x = n, y = Denomination_for_Tableau)) +
geom_line()
ggplot(data = decade_by_denomination, aes(x = Year, y = Denomination_for_Tableau$n)) +
geom_line()
ggplot(data = decade_by_denomination, aes(x = Decade, y = Denomination_for_Tableau$n)) +
geom_line()
ggplot(data = decade_by_denomination, aes(x = Decade, y = n)) +
geom_line()
table(elop.raw$Denomination_for_Tableau, elop.raw$Year)
View(denomination_by_decade)
View(denomination_by_decade)
library(ggplot2)
library(dplyr)
set.seed(272727)
data <- elop.raw(year = sample(year, 100, replace = TRUE),
string = sample(Denomination_for_Tableau, 100, replace = TRUE))
# this is what will be plotted
table(data$string, data$year)
dataSummary <- as.data.frame(xtabs(~year+string, data))
ggplot(dataSummary, aes(x = year, y = Freq, group = string, colour = string)) + geom_line()
ggplot(denomination_by_year, aes(x=Year, y=elop.rawDenomination_for_Tableau)) + geom_line()
ggplot(denomination_by_year, aes(x=Year, y=elop.raw$Denomination_for_Tableau)) + geom_line()
barplot(table(elop.raw$Denomination_for_Tableau))
factor(elop.raw$Denomination_for_Tableau)
factor(elop.raw$Denomination_for_Tableau)
library(ggplot2)
library(dplyr)
set.seed(272727)
data <- data.frame(year = elop.raw(1870:1914, 100, replace = TRUE),
string = elop.raw(denomination_by_year[1:5], 100, replace = TRUE))
# this is what will be plotted
table(data$string, data$year)
dataSummary <- as.data.frame(xtabs(~year+string, data))
ggplot(dataSummary, aes(x = year, y = Freq, group = string, colour = string)) + geom_line()
View(decade_by_denomination)
decade_by_denomination <- elop.raw %>%
group_by(Decade, Denomination_for_Tableau) %>%
tally()
ggplot(data = decade_by_denomination, aes(x = Decade, y = n)) +
geom_line()
ggplot(data = decade_by_denomination, aes(x = Decade, y = denomination_by_decade)) +
geom_line()
ggplot(data = decade_by_denomination, aes(x = Decade, y = Denomination_for_Tableau)) +
geom_line()
ggplot(data = decade_by_denomination, aes(x = Decade, y = n, group = Denomination_for_Tableau)) +
geom_line()
ggplot(data = decade_by_denomination, aes(x = Decade, y = n, color = Denomination_for_Tableau)) +
geom_line()
ggplot(data = decade_by_denomination, aes(x = Decade, y = n, group = Denomination_for_Tableau, color = Denomination_for_Tableau)) +
geom_line()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
