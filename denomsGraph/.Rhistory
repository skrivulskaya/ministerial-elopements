shiny::runApp()
library(shiny)
mData <- read.csv("mec.csv", header=TRUE)
denoms <- mData$Denomination_for_Tableau
# dateleft <- mData[4]
decadeLeft <- as.Date(as.character(mData$Decade), "%Y")
df <- data.frame(decadeLeft, denoms)
mData <- read.csv("mec.csv", header=TRUE)
denoms <- mData$Denomination_for_Tableau
# dateleft <- mData[4]
# decadeLeft <- as.Date(as.character(mData$Decade), "%Y")
decadeLeft <- mData$Decade
df <- data.frame(decadeLeft, denoms)
runApp()
shiny::runApp()
library(shiny)
mData <- read.csv("mec.csv", header=TRUE)
denoms <- mData$Denomination_for_Tableau
# dateleft <- mData[4]
# decadeLeft <- as.Date(as.character(mData$Decade), "%Y")
decadeLeft <- mData$Decade
denomTypes <- levels(denoms)
print(denomTypes)
library(shiny)
mData <- read.csv("mec.csv", header=TRUE)
denoms <- mData$Denomination_for_Tableau
# dateleft <- mData[4]
# decadeLeft <- as.Date(as.character(mData$Decade), "%Y")
decadeLeft <- mData$Decade
denomTypes <- levels(denoms)
plot(denoms, pch=as.integer(denomTypes))
plot(denoms, denomTypes)
plot(denoms, (5, 10, 15, 20), pch=as.integer(denomTypes))
yAxis <- c(5, 10, 15, 20)
plot(denoms, yAxis, pch=as.integer(denomTypes))
barplot(denomTypes)
barplot(denoms)
library(shiny)
mData <- read.csv("mec.csv", header=TRUE)
denoms <- mData$Denomination_for_Tableau
# dateleft <- mData[4]
# decadeLeft <- as.Date(as.character(mData$Decade), "%Y")
decadeLeft <- mData$Decade
denomTypes <- levels(denoms)
barplot(denomTypes)
barplot(as.integer(denomTypes))
barplot(as.integer(denoms))
print denomTypes
print (denomTypes)
#denomTypes <- levels(denoms)
denomTypes <- table(denoms)
barplot(denomTypes)
print(denomTypes)
df <- data.frame(decadeLeft, denoms)
df$freq[df$decadeLeft="1870s"]
df$freq[df$x="1870s"]
df$freq["1870s"]
df$freq[df$x]
#df <- data.frame(decadeLeft, denoms)
df <- data.frame(x=decadeLeft, denoms)
df$freq[df$x]
mData <- read.csv("mec.csv", header=TRUE)
denoms <- mData$Denomination_for_Tableau
# dateleft <- mData[4]
# decadeLeft <- as.Date(as.character(mData$Decade), "%Y")
decadeLeft <- mData$Decade
#df <- data.frame(decadeLeft, denoms)
df <- data.frame(x=decadeLeft, denoms)
#This works with barplot
denomTypes <- table(denoms)
df$freq[df$x]
library(shiny)
mData <- read.csv("mec.csv", header=TRUE)
denoms <- mData$Denomination_for_Tableau
# dateleft <- mData[4]
# decadeLeft <- as.Date(as.character(mData$Decade), "%Y")
decadeLeft <- mData$Decade
df <- data.frame(decadeLeft, denoms)
#This works with barplot
denomTypes <- table(denoms)
df$freq
df$freq(ds[3])
df$freq(ds$Decade)
df$freq(df[3])
df$freq(df$decade)
df
df$freq(df$decadeLeft)
df$freq(df$decadeLeft==1890s)
df$freq(df$decadeLeft=="1890s")
df$freq(df$decadeLeft==("1890s")
)
df$freq(df$decadeLeft==("1890s"))
df$freq[df$x==TRUE]
df$freq[df$decadeLeft==TRUE]
df$freq[df$decadeLeft=="1880s"]
df$freq[df$decadeLeft=="1800s"]
df$freq[df$decadeLeft=="1870s"]
df$freq[df[$decadeLeft[3]=="1870s"]
df$freq[df[decadeLeft[3]=="1870s"]
]
df$freq[df$decadeLeft[3]=="1870s"]
df$freq[df$decadeLeft[3]]
ds$freq
df$freq
library(plyr)
count
install.packages("plyr")
library(plyr)
count
count(df)
count(df$decadeLeft)
df$freq[df$decadeLeft=="1880s"]
count(df$decadeLeft, denoms)
df
df$freq[df$x=='1880s']
View(df)
shiny::runApp()
runApp()
runApp('app2.R')
runApp('app2.R')
View(df)
runApp('app2.R')
install.packages("magrittr")
runApp('app2.R')
install dplyr
install.packages("dplyr")
library(shiny); runApp('app2.R')
runApp('app2.R')
view df
view(df)
View
View(df)
View(dfSummed)
runApp('app2.R')
View(dfSummed)
dfSummed <- data.frame(df)
runApp('app2.R')
runApp('app2.R')
library(shiny)
library(magrittr)
library(dplyr)
mData <- read.csv("mec.csv", header=TRUE)
denoms <- mData$Denomination_for_Tableau
# dateleft <- mData[4]
# decadeLeft <- as.Date(as.character(mData$Decade), "%Y")
decadeLeft <- mData$Decade
df <- data.frame(decadeLeft, denoms)
#This works with barplot
denomTypes <- table(denoms)
barplot(denomTypes)
# Define UI
ui <- fluidPage(
# Application title
titlePanel("Ministers by Denomination"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("Decade",
"Number of bins:",
#min = 1,
#min = as.integer(min(df$decadeLeft)),
#min = tapply(df$decadeLeft, FUN = min),
min = 1860,
max = 1910,
value = 1880,
step = 10)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("barplot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$barplot <- renderPlot({
# generate bins based on input$bins from ui.R
#x    <- faithful[, 2]
#bins <- seq(min(x), max(x), length.out = input$bins + 1)
realDecade <- "1870s"
if(input$Decade == 1860){
#  print("Positive number")
realDecade <- "1860s"
}
#dfSummed <- df %>%
#select(decadeLeft, denoms) %>%
#group_by(decadeLeft) %>%
#summarise(decader = count(decadeLeft), denomer = count(denoms))
dfSummed <- data.frame(df)
# draw the histogram with the specified number of bins
barplot(table(df$denoms), col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
dfSummed <- data.frame(df)
View(dfSummed)
runApp('app2.R')
runApp('app2.R')
dfSummed
df
library(shiny); runApp('app3.R')
table(newDF$denoms)
runApp('app3.R')
dfsummed
dfSummed
runApp('app3.R')
realDecade
library(shiny)
library(magrittr)
library(dplyr)
mData <- read.csv("mec.csv", header=TRUE)
denoms <- mData$Denomination_for_Tableau
# dateleft <- mData[4]
# decadeLeft <- as.Date(as.character(mData$Decade), "%Y")
decadeLeft <- mData$Decade
df <- data.frame(decadeLeft, denoms)
#This works with barplot
denomTypes <- table(denoms)
barplot(denomTypes)
# Define UI
ui <- fluidPage(
# Application title
titlePanel("Ministers by Denomination"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("Decade",
"Number of bins:",
#min = 1,
#min = as.integer(min(df$decadeLeft)),
#min = tapply(df$decadeLeft, FUN = min),
min = 1860,
max = 1910,
value = 1880,
step = 10)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("barplot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$barplot <- renderPlot({
# generate bins based on input$bins from ui.R
#x    <- faithful[, 2]
#bins <- seq(min(x), max(x), length.out = input$bins + 1)
#realDecade <- "1870s"
if(input$Decade == 1910){
#  print("Positive number")
realDecade <- "1910-1914"
} else {
#realDecade <- toString(input$Decade) + "s"
#realDecade <- input$Decade + "s"
realDecade <- paste(toString(input$Decade), "s")
}
#dfSummed <- df %>%
#select(decadeLeft, denoms) %>%
#group_by(decadeLeft) %>%
#summarise(decader = count(decadeLeft), denomer = count(denoms))
dfSummed <- data.frame(df)
#https://stackoverflow.com/questions/26581410/summarizing-count-and-conditional-aggregate-functions-on-the-same-factor
#dfSummed %>%
#  group_by(decadeLeft,denoms) %>%
#  summarise(total.count=n(),
#          count=sum(is.na(denoms))
#          )
#dfSummed <- df[which()]
newDF <- dfSummed %>%
filter(decadeLeft == "1870s")
# draw the histogram
# barplot(table(df$denoms), col = 'darkgray', border = 'white')
# draw the histogram
# barplot(table(df$denoms), col = 'darkgray', border = 'white')
barplot(table(newDF$denoms), col = 'darkgray', border = 'white')
#barplot(newDF$denoms, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('app3.R')
library(shiny)
library(magrittr)
library(dplyr)
testvar <- "Hey there!"
mData <- read.csv("mec.csv", header=TRUE)
denoms <- mData$Denomination_for_Tableau
# dateleft <- mData[4]
# decadeLeft <- as.Date(as.character(mData$Decade), "%Y")
decadeLeft <- mData$Decade
df <- data.frame(decadeLeft, denoms)
#This works with barplot
denomTypes <- table(denoms)
barplot(denomTypes)
# Define UI
ui <- fluidPage(
# Application title
titlePanel("Ministers by Denomination"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("Decade",
"Number of bins:",
#min = 1,
#min = as.integer(min(df$decadeLeft)),
#min = tapply(df$decadeLeft, FUN = min),
min = 1860,
max = 1910,
value = 1880,
step = 10)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("barplot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$barplot <- renderPlot({
# generate bins based on input$bins from ui.R
#x    <- faithful[, 2]
#bins <- seq(min(x), max(x), length.out = input$bins + 1)
#realDecade <- "1870s"
if(input$Decade == 1910){
#  print("Positive number")
realDecade <- "1910-1914"
} else {
#realDecade <- toString(input$Decade) + "s"
#realDecade <- input$Decade + "s"
realDecade <- paste(toString(input$Decade), "s")
}
#dfSummed <- df %>%
#select(decadeLeft, denoms) %>%
#group_by(decadeLeft) %>%
#summarise(decader = count(decadeLeft), denomer = count(denoms))
dfSummed <- data.frame(df)
#https://stackoverflow.com/questions/26581410/summarizing-count-and-conditional-aggregate-functions-on-the-same-factor
#dfSummed %>%
#  group_by(decadeLeft,denoms) %>%
#  summarise(total.count=n(),
#          count=sum(is.na(denoms))
#          )
#dfSummed <- df[which()]
newDF <- dfSummed %>%
filter(decadeLeft == "1870s")
# draw the histogram
# barplot(table(df$denoms), col = 'darkgray', border = 'white')
# draw the histogram
# barplot(table(df$denoms), col = 'darkgray', border = 'white')
barplot(table(newDF$denoms), col = 'darkgray', border = 'white')
#barplot(newDF$denoms, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny); runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
runApp('app3.R')
realDecade
input$Decade
runApp('app3.R')
paste0("s", "s")
paste0("s", "s")
realDecade <- paste(toString(1880), "s")
realDecade
realDecade <- paste(toString(1880), "s", sep="")
realDecade
runApp('app3.R')
decadeLeft
runApp('app3.R')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='scholarsgrotto', token='7822E7832183001C3292F1B7ABDE49CF', secret='wscHdYRnqlTMNKjMod4IZaA+8ABbU9uHhawTkWeG')
runApp()
runApp()
